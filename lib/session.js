// lib/session.js - VERSION CORRIG√âE
import { Redis } from '@upstash/redis';

const redis = Redis.fromEnv();

/**
 * Stocke une session utilisateur dans Redis
 */
export async function storeUserSession(token, userData) {
    try {
        console.log('üíæ Stockage session Redis pour token:', token.substring(0, 20) + '...');

        // Upstash Redis g√®re automatiquement la s√©rialisation JSON
        await redis.set(`session:${token}`, JSON.stringify(userData), { ex: 3600 });
        console.log('‚úÖ Session stock√©e avec cl√©: session:' + token.substring(0, 20) + '...');

        // V√©rification
        const verify = await redis.get(`session:${token}`);
        if (verify) {
            console.log('‚úÖ Stockage Redis confirm√©');
            return true;
        } else {
            console.log('‚ùå √âchec v√©rification Redis');
            return false;
        }
    } catch (error) {
        console.error('‚ùå Erreur stockage session Redis:', error);
        return false;
    }
}

/**
 * R√©cup√®re une session utilisateur depuis Redis - VERSION CORRIG√âE
 */
export async function getUserSession(token) {
    try {
        if (!token) return null;

        console.log('üîç Recherche session avec token:', token.substring(0, 20) + '...');

        // üî• CORRECTION : Upstash Redis renvoie d√©j√† l'objet pars√©
        const userData = await redis.get(`session:${token}`);

        console.log('üì¶ Donn√©es r√©cup√©r√©es de Redis:', typeof userData, userData);

        // Si userData est d√©j√† un objet, le retourner directement
        if (userData && typeof userData === 'object') {
            console.log('‚úÖ Session trouv√©e (objet d√©j√† pars√©)');
            return userData;
        }

        // Si c'est une string, tenter de la parser
        if (typeof userData === 'string') {
            try {
                const parsed = JSON.parse(userData);
                console.log('‚úÖ Session trouv√©e (string pars√©e)');
                return parsed;
            } catch (parseError) {
                console.error('‚ùå Erreur parsing JSON:', parseError);
                return null;
            }
        }

        return null;

    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration session Redis:', error);
        return null;
    }
}

/**
 * V√©rifie la session √† partir de la requ√™te
 */
export async function checkSession(request) {
    try {
        console.log('üîê D√©but v√©rification session...');

        // R√©cup√©rer le header Authorization
        let authHeader;

        if (request.headers && request.headers.authorization) {
            authHeader = request.headers.authorization;
        }
        else if (request.headers && typeof request.headers.get === 'function') {
            authHeader = request.headers.get('authorization');
        }
        else if (request.headers) {
            const headers = request.headers;
            authHeader = headers.Authorization || headers.authorization;
        }

        console.log('üîë Auth header:', authHeader ? 'pr√©sent' : 'absent');

        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            console.log('‚ùå Header Authorization manquant ou invalide');
            return null;
        }

        const token = authHeader.substring(7);

        if (!token) {
            console.log('‚ùå Token manquant');
            return null;
        }

        console.log('üîê V√©rification token:', token.substring(0, 20) + '...');

        const userSession = await getUserSession(token);

        if (!userSession) {
            console.log('‚ùå Session non trouv√©e dans Redis');
            return null;
        }

        console.log('‚úÖ Session valide pour:', userSession.username);
        return userSession;

    } catch (error) {
        console.error('‚ùå Erreur v√©rification session:', error);
        return null;
    }
}

/**
 * R√©ponse standard pour non autoris√©
 */
export function unauthorizedResponse() {
    return new Response(
        JSON.stringify({
            error: "Non autoris√©",
            message: "Session invalide ou expir√©e"
        }), {
            status: 401,
            headers: {
                'content-type': 'application/json',
                'www-authenticate': 'Bearer'
            },
        }
    );
}

/**
 * Supprime une session utilisateur de Redis
 */
export async function deleteUserSession(token) {
    try {
        await redis.del(`session:${token}`);
        console.log('‚úÖ Session supprim√©e:', token.substring(0, 20) + '...');
        return true;
    } catch (error) {
        console.error('‚ùå Erreur suppression session Redis:', error);
        return false;
    }
}